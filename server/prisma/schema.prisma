generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int              @id @default(autoincrement())
  username              String           @unique
  password              String
  role                  UserRole         @default(CASHIER)
  name                  String
  email                 String?          @unique
  isActive              Boolean          @default(true)
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  createdBy             Int?
  lastLogin             DateTime?
  loginCount            Int              @default(0)
  shiftId               Int?
  orders                Order[]
  adminOverrideLogs     ShiftLog[]       @relation("AdminOverrideUser")
  shiftLogs             ShiftLog[]
  shiftOverridesAsAdmin ShiftOverride[]  @relation("ShiftOverrideAdmin")
  shiftOverridesAsUser  ShiftOverride[]  @relation("ShiftOverrideUser")
  stockLogs             StockLog[]
  permissions           UserPermission[]
  creator               User?            @relation("UserCreator", fields: [createdBy], references: [id])
  createdUsers          User[]           @relation("UserCreator")
  shift                 Shift?           @relation(fields: [shiftId], references: [id])

  @@index([createdBy], map: "users_createdBy_fkey")
  @@index([shiftId], map: "users_shiftId_fkey")
  @@map("users")
}

model UserPermission {
  id         Int      @id @default(autoincrement())
  userId     Int
  permission String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, permission])
  @@map("user_permissions")
}

model Table {
  id          Int         @id @default(autoincrement())
  number      Int         @unique
  status      TableStatus @default(AVAILABLE)
  capacity    Int         @default(4)
  group       String?     @default("General")
  notes       String?
  maintenance Boolean     @default(false)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orders      Order[]

  @@map("tables")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  price       Decimal     @db.Decimal(10, 2)
  categoryId  Int
  isActive    Boolean     @default(true)
  imageUrl    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  productId   String      @unique @default("PROD000")
  costPrice   Decimal     @db.Decimal(10, 2)
  needStock   Boolean     @default(false)
  orderItems  OrderItem[]
  category    Category    @relation(fields: [categoryId], references: [id])
  stock       Stock?

  @@index([categoryId], map: "products_categoryId_fkey")
  @@map("products")
}

model Stock {
  id        Int        @id @default(autoincrement())
  productId Int        @unique
  quantity  Int        @default(0)
  minStock  Int        @default(10)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  product   Product    @relation(fields: [productId], references: [id])
  stockLogs StockLog[]

  @@map("stock")
}

model Order {
  id                 Int            @id @default(autoincrement())
  orderNumber        String         @unique
  tableId            Int
  userId             Int
  status             OrderStatus    @default(PENDING)
  subtotal           Decimal        @db.Decimal(10, 2)
  tax                Decimal        @default(0.00) @db.Decimal(10, 2)
  discount           Decimal        @default(0.00) @db.Decimal(10, 2)
  total              Decimal        @db.Decimal(10, 2)
  paymentMethod      PaymentMethod?
  customerNote       String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  businessSnapshot   String?        @db.LongText
  currency           String?        @default("USD")
  splitAmounts       String?        @db.Text
  splitBill          Boolean        @default(false)
  mixedPayments      Boolean        @default(false)
  paymentMethods     String?        @db.Text
  nestedPayments     Boolean        @default(false)
  mixedCurrency      Boolean        @default(false)
  splitMixedCurrency Boolean        @default(false)
  paidRiel           Decimal?       @db.Decimal(10, 2)
  paidUsd            Decimal?       @db.Decimal(10, 2)
  orderItems         OrderItem[]
  table              Table          @relation(fields: [tableId], references: [id])
  user               User           @relation(fields: [userId], references: [id])

  @@index([tableId], map: "orders_tableId_fkey")
  @@index([userId], map: "orders_userId_fkey")
  @@map("orders")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  subtotal  Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId], map: "order_items_orderId_fkey")
  @@index([productId], map: "order_items_productId_fkey")
  @@map("order_items")
}

model StockLog {
  id        Int          @id @default(autoincrement())
  stockId   Int
  userId    Int
  type      StockLogType
  quantity  Int
  note      String?
  createdAt DateTime     @default(now())
  stock     Stock        @relation(fields: [stockId], references: [id])
  user      User         @relation(fields: [userId], references: [id])

  @@index([stockId], map: "stock_logs_stockId_fkey")
  @@index([userId], map: "stock_logs_userId_fkey")
  @@map("stock_logs")
}

model Settings {
  id        Int      @id @default(autoincrement())
  category  String   @unique
  data      String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

model Shift {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  startTime      String
  endTime        String
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  description    String?
  gracePeriod    Int             @default(10)
  daysOfWeek     String?
  shiftLogs      ShiftLog[]
  shiftOverrides ShiftOverride[]
  users          User[]

  @@map("shifts")
}

model ShiftLog {
  id                  Int          @id @default(autoincrement())
  userId              Int
  shiftId             Int
  type                ShiftLogType
  clockIn             DateTime?
  clockOut            DateTime?
  notes               String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  cashDifference      Decimal?     @db.Decimal(10, 2)
  closingBalance      Decimal?     @db.Decimal(10, 2)
  expectedBalance     Decimal?     @db.Decimal(10, 2)
  openingBalance      Decimal?     @db.Decimal(10, 2)
  adminOverride       Boolean      @default(false)
  adminOverrideBy     Int?
  adminOverrideReason String?
  adminOverrideUser   User?        @relation("AdminOverrideUser", fields: [adminOverrideBy], references: [id])
  shift               Shift        @relation(fields: [shiftId], references: [id])
  user                User         @relation(fields: [userId], references: [id])

  @@index([userId], map: "shift_logs_userId_fkey")
  @@index([shiftId], map: "shift_logs_shiftId_fkey")
  @@index([adminOverrideBy], map: "shift_logs_adminOverrideBy_fkey")
  @@map("shift_logs")
}

model ShiftOverride {
  id        Int      @id @default(autoincrement())
  shiftId   Int
  userId    Int?
  adminId   Int
  action    String
  reason    String
  oldValue  String?
  newValue  String?
  notes     String?
  createdAt DateTime @default(now())
  metadata  String?  @db.LongText
  admin     User     @relation("ShiftOverrideAdmin", fields: [adminId], references: [id])
  shift     Shift    @relation(fields: [shiftId], references: [id])
  user      User?    @relation("ShiftOverrideUser", fields: [userId], references: [id])

  @@index([shiftId], map: "shift_overrides_shiftId_fkey")
  @@index([userId], map: "shift_overrides_userId_fkey")
  @@index([adminId], map: "shift_overrides_adminId_fkey")
  @@index([createdAt])
  @@map("shift_overrides")
}

enum UserRole {
  ADMIN
  CASHIER
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
  QR
}

enum StockLogType {
  ADD
  REMOVE
  ADJUST
}

enum ShiftLogType {
  CLOCK_IN
  CLOCK_OUT
  BREAK_START
  BREAK_END
  OVERTIME_START
  OVERTIME_END
}
