// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      UserRole @default(CASHIER)
  name      String
  email     String?  @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders    Order[]
  stockLogs StockLog[]

  @@map("users")
}

model Table {
  id        Int        @id @default(autoincrement())
  number    Int        @unique
  status    TableStatus @default(AVAILABLE)
  capacity  Int        @default(4)
  group     String?    @default("General")
  notes     String?
  maintenance Boolean  @default(false)
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  orders Order[]

  @@map("tables")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  price       Decimal  @db.Decimal(10, 2)
  categoryId  Int
  isDrink     Boolean  @default(false)
  isActive    Boolean  @default(true)
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category    Category    @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  stock       Stock?

  @@map("products")
}

model Stock {
  id        Int      @id @default(autoincrement())
  productId Int      @unique
  quantity  Int      @default(0)
  minStock  Int      @default(10)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product   Product    @relation(fields: [productId], references: [id])
  stockLogs StockLog[]

  @@map("stock")
}

model Order {
  id          Int           @id @default(autoincrement())
  orderNumber String        @unique
  tableId     Int
  userId      Int
  status      OrderStatus   @default(PENDING)
  subtotal    Decimal       @db.Decimal(10, 2)
  tax         Decimal       @db.Decimal(10, 2) @default(0)
  discount    Decimal       @db.Decimal(10, 2) @default(0)
  total       Decimal       @db.Decimal(10, 2)
  paymentMethod PaymentMethod?
  customerNote String?
  businessSnapshot Json?    // Store business settings at time of order creation
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  table      Table       @relation(fields: [tableId], references: [id])
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  subtotal  Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model StockLog {
  id        Int           @id @default(autoincrement())
  stockId   Int
  userId    Int
  type      StockLogType
  quantity  Int
  note      String?
  createdAt DateTime      @default(now())

  // Relations
  stock Stock @relation(fields: [stockId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("stock_logs")
}

model Settings {
  id        Int      @id @default(autoincrement())
  category  String   @unique // 'business', 'system', 'security'
  data      Json     // Store settings as JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

enum UserRole {
  ADMIN
  CASHIER
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
}

enum StockLogType {
  ADD
  REMOVE
  ADJUST
} 